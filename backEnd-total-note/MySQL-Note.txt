=============================  MySQL 数据库安装   ==============================
MySQL数据库
RDBMS即关系数据库管理系统(Relational Database Management System)


连接到MySQL服务器：mysql -u root -p
密码：123456
创建数据库 ：create database zhq;  zhq指数据库的名字
删除数据库：drop database zhq;
显示数据库： SHOW DATABASES;
修改密码：ALTER USER "root"@"localhost" IDENTIFIED  BY "你的新密码";
删除数据表：DROP TABLE table_name ;
判断表中内容为空：SELECT * FROM runoob_test_tbl WHERE runoob_count IS NULL;
非空判断：SELECT * from runoob_test_tbl WHERE runoob_count IS NOT NULL;


数据类型：
MySQL支持多种类型，大致可以分为三类：数值、日期/时间、字符串(字符)类型。
严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。
表示时间值的日期和时间类型为 DATETIME、DATE、TIMESTAMP、TIME和YEAR。
字符串类型指 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET。

以下为创建 MySQL 数据表的 SQL 通用语法：
CREATE TABLE table_name (column_name column_type);

以下例子中我们将在 RUNOOB 数据库中创建数据表runoob_tbl：
CREATE TABLE IF NOT EXISTS `runoob_tbl`(
   `runoob_id` INT UNSIGNED AUTO_INCREMENT,
   `runoob_title` VARCHAR(100) NOT NULL,
   `runoob_author` VARCHAR(40) NOT NULL,
   `submission_date` DATE,
   PRIMARY KEY ( `runoob_id` )
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

最好设置字段的属性为 NOT NULL， 在操作数据库时如果输入该字段的数据为NULL ，就会报错。
AUTO_INCREMENT 定义列为自增的属性，一般用于主键，数值会自动加1。
PRIMARY KEY 关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。
ENGINE 设置存储引擎，CHARSET 设置编码。
注意点的问题： 创建 MySql 的表时，表名和字段名外面的符号 ` 不是单引号，


=====================   table相关操作  ===========================
删除表内数据：delete from 表名 where 删除条件;
实例：删除学生表内姓名为张三的记录。
delete from  student where  T_name = "张三";

清除表内数据，保存表结构，用 truncate。格式为：
truncate table 表名;

1、当你不再需要该表时， 用 drop;
2、当你仍要保留该表，但要删除所有记录时， 用 truncate;
3、当你要删除部分记录时， 用 delete。

delete 操作以后，使用 optimize table table_name 会立刻释放磁盘空间，不管是 innodb 还是 myisam;
实例，删除学生表中姓名为 "张三" 的数据： delete from student where T_name = "张三";
实例，释放学生表的表空间： optimize table student;

表格中插入数据：
INSERT INTO runoob_tbl
(runoob_title, runoob_author, submission_date)
VALUES
("学习 PHP", "菜鸟教程", NOW());
显示表中的内容：select * from runoob_tbl;

查询数据语法
以下为在MySQL数据库中查询数据通用的 SELECT 语法：
SELECT column_name,column_name
FROM table_name
[WHERE Clause]
[LIMIT N][ OFFSET M]
查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。
SELECT 命令可以读取一条或者多条记录。
你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据
你可以使用 WHERE 语句来包含任何条件。
你可以使用 LIMIT 属性来设定返回的记录数。
你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。

以下是 SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法：
SELECT field1, field2,...fieldN FROM table_name1, table_name2...
[WHERE condition1 [AND [OR]] condition2.....
查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用WHERE语句来设定查询条件。
你可以在 WHERE 子句中指定任何条件。
你可以使用 AND 或者 OR 指定一个或多个条件。
WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。
WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。

如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。
UPDATE runoob_tbl SET runoob_title='学习 C++' WHERE runoob_id=3;

MySQL 数据表中删除数据的通用语法：
DELETE FROM table_name [WHERE Clause]

读取符合一定条件的数据
SELECT field1, field2,...fieldN
FROM table_name
WHERE field1 LIKE condition1 [AND [OR]] filed2 = 'somevalue'
SELECT * from runoob_tbl  WHERE runoob_author LIKE '%COM';

UNION命令
SELECT country FROM Websites
UNION
SELECT country FROM apps
ORDER BY country;

升序排列：
SELECT * from runoob_tbl ORDER BY submission_date ASC;
降序排列：
SELECT * from runoob_tbl ORDER BY submission_date DESC;
使用 GROUP BY 语句 将数据表按名字进行分组，并统计每个人有多少条记录：
SELECT name, COUNT(*) FROM   employee_tbl GROUP BY name;

=========================  正则表达式  ==================
查找name字段中以'st'为开头的所有数据：
mysql> SELECT name FROM person_tbl WHERE name REGEXP '^st';
查找name字段中以'ok'为结尾的所有数据：
mysql> SELECT name FROM person_tbl WHERE name REGEXP 'ok$';
查找name字段中包含'mar'字符串的所有数据：
mysql> SELECT name FROM person_tbl WHERE name REGEXP 'mar';
查找name字段中以元音字符开头或以'ok'字符串结尾的所有数据：
mysql> SELECT name FROM person_tbl WHERE name REGEXP '^[aeiou]|ok$';

处理事务
1、用 BEGIN, ROLLBACK, COMMIT来实现
    BEGIN 开始一个事务
    ROLLBACK 事务回滚
    COMMIT 事务确认
2、直接用 SET 来改变 MySQL 的自动提交模式:
    SET AUTOCOMMIT=0 禁止自动提交
    SET AUTOCOMMIT=1 开启自动提交
事务控制
BEGIN 或 START TRANSACTION；显式地开启一个事务；
COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改称为永久性的；
ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；
SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；
RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；
ROLLBACK TO identifier；把事务回滚到标记点；
SET TRANSACTION；用来设置事务的隔离级别。
InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。
修改表名： ALTER TABLE testalter_tbl RENAME TO alter_tbl;

ENUM和SET类型都是集合类型，不同的是ENUM类型最多可枚举65535个元素，而SET类型最多枚举64个元素。且set中可以存set枚举中的组合，比如执行



MySQL中的一些区别
1、用来传入参数，sql在解析的时候会加上" ",当成字符串来解析 ，如这里 role_id = "roleid";
2、#{}能够很大程度上防止sql注入;
延伸：
1、用${}传入数据直接显示在生成的sql中，如上面的语句，用role_id = ${roleId,jdbcType=INTEGER},那么sql在解析的时候值为role_id = roleid，执行时会报错;
2、${}方式无法防止sql注入;
3、$一般用入传入数据库对象，比如数据库表名;
4、能用#{}时尽量用#{}


### binlog
      当有数据写入到数据库时，还会同时把更新的SQL语句写入到对应的binlog文件里，这个文件就是上文说的binlog文件。使用mysqldump备份时，只是对一段时间的数据进行全备，但是如果备份后突然发现数据库服务器故障，这个时候就要用到binlog的日志了。

主要作用是用于数据库的主从复制及数据的增量恢复。

1.啥是binlog? 记录数据库增删改,不记录查询的二进制日志.
2.作用:用于数据恢复.





LIMIT OFFSET, ROW_COUNT 实现分页
存在性能问题的方式
SELECT * FROM myTable ORDER BY `id` LIMIT 1000000, 30
1
写出这样SQL语句的人肯定心里是这样想的：MySQL数据库会直接定位到符合条件的第1000000位，然后再取30条数据。

然而，实际上MySQL不是这样工作的。

LIMIT 1000000, 30 的意思是：扫描满足条件的1000030行，扔掉前面的1000000行，然后返回最后的30行。

可以利用子查询先定位出要查询的语句ID，然后读取数据，减少磁盘的I/O

————————————————
版权声明：本文为CSDN博主「crane.yuan」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u014717036/article/details/84799896
