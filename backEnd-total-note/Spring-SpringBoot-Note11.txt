================   基本操作   ====================
默认引入jar包，内置了tomcat等

springboot   dev-tools 提供热部署功能，代码改变之后重新启动部署，提高调试速度。
IDEA  中进行热部署

右键 -> show in explorer  快速打开当前文件所在的目录
maven  package 将程序打包，java -jar 将打好的包运行

netstat -aon|findstr "8080"   查询指定端口的PID 号
然后通过任务管理器可以将应用杀死。
或者 使用命令行  taskkill /pid 12448 -t -f    其中12448为PID号


================   chapter 3 4 配置文件   ====================
classpath 路径
1、spring boot默认加载文件的路径：
    /META-INF/resources/
    /resources/
    /static/
    /public/

我们也可以从spring boot源码也可以看到：
private static final String[] CLASSPATH_RESOURCE_LOCATIONS = {
    "classpath:/META-INF/resources/",
    "classpath:/resources/",
    "classpath:/static/",
    "classpath:/public/" };

YAML配置文件：springboot 的官方推荐配置文件形式
（1）冒号后面需要添加空格
多环境配置：
可以将公共的配置文件配置在  application.properties
将多个环境的配置于application-dev.properties   application-test.properties  等
maven 打包  clean + package
在命令行运行不同环境： java -jar  jarName.jar --spring.profiles.active=test

YAML 中  通过三个横线区分不同的使用环境

================   chapter 5 日志配置   ====================
logback-spring.xml  默认logback  可以设置日志的存储位置、打印格式等
如果想改成log4j2，则需要将logback对应的包从pom依赖中去除

性能比较：Log4J2 和 Logback 都优于 log4j（不推荐使用）
配置方式：Logback最简洁，spring boot默认，推荐使用


================   chapter6  模板引擎 freemarker   ====================
写html的   但是后缀名为ftl，没有做到前后端分离

================   chapter7  模板引擎 thymeleaf   ====================
没什么可写的

================   chapter9  错误处理   ====================
针对 /error  路径重新改写了一些内容，重新定义error页面的内容，没什么可写的

================   chapter10  servlet filter listener   ====================
有三种配置方法
方法一：通过注册 ServletRegistrationBean、 FilterRegistrationBean 和 ServletListenerRegistrationBean 获得控制
方法二：通过实现 ServletContextInitializer 接口直接注册

implements ServletContextInitializer {

@Override
public void onStartup(ServletContext servletContext) throws
ServletException {
servletContext.addServlet("customServlet", new
CustomServlet()).addMapping("/roncoo"); servletContext.addFilter("customFilter", new
CustomFilter()).addMappingForServletNames(EnumSet.of(DispatcherType.REQUES T), true, "customServlet");
servletContext.addListener(new CustomListener());
}

  方法三：在 SpringBootApplication 上使用@ServletComponentScan 注解后，直接通过@WebServlet、
@WebFilter、@WebListener 注解自动注册

================   chapter11  cors支持   ====================
跨域请求的相关配置

================   chapter12  文件上传   ====================
spring.servlet.multipart  多文件上传的springboot默认配置


================   chapter13  使用SQL关系型数据库   ====================
(1) 嵌入式数据库（如h2），只需引入对应的jar包
jdbcTempalte的使用，基本的使用方式，没什么可写的


================   chapter14  使用SQL关系型数据库   ====================
spring-data-jpa

此教程就是扫盲的，
